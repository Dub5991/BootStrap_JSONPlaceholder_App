
reactbootstrap.jpg


üìå Introduction 
React Bootstrap
Welcome to this lesson on React Bootstrap, where we‚Äôll learn how to create beautiful, responsive UIs in React using the Bootstrap framework seamlessly adapted for React‚Äôs component-based architecture. React Bootstrap provides all of Bootstrap‚Äôs popular components‚Äîbuttons, forms, modals, badges, spinner, carousels and more‚Äîrepackaged as React components, so you can create well-designed layouts.

Using React Bootstrap offers several advantages: 

speeds up development by providing pre-styled, ready-to-use components
supports custom theming for a personalized look
ensures mobile-first, responsive design across different screen sizes. 
is optimized for React‚Äôs virtual DOM, providing better performance and smoother user experiences compared to traditional Bootstrap.
reactbootstrapadvantages.png
By the end of this lesson, you‚Äôll know how to leverage React Bootstrap to build clean, professional interfaces quickly, making your development process faster and more efficient.



üß†üììEngage & Apply: Apply React Bootstrap to the JSONPlaceholder App 
We will be applying React Bootstrap to the App we created in the previous lesson "SPAs, Axios, and React Routing."  The App's code is mostly unchanged so we won't explain any of functionality created in the previous lesson.  We will solely focus on the new features the added React Bootstrap code brings.  

Initialize the Project:
Create a folder where the project will be created
Open your terminal in that directory
Run npx create-vite spa-router-bootstrap --template react to create a new React project using Vite.
Navigate into your project directory: cd spa-router-bootstrap.
Install the necessary dependencies by running npm install
We will need to install Axios and React Router again by running:  npm install react-router-dom axios
TIP: you can install multiple packages but just separating them with a space like we see above

To apply React Bootstrap we need to install Bootstrap itself as well as the React Bootstrap package 
Do so by running: npm i react-bootstrap bootstrap  - we are installing two packages here, react-bootstrap and bootstrap
TIP: npm i  is short for npm install, you can use either one.

Open VS Code, Create Component Files
Open the spa-router-bootstrap folder inside of VS Code
In the src directory, create a new folder named components.  
In the components directory, we will be creating the same components as last time, but will be adding a couple new ones.
Create the following components and don't put in any code in them yet:
HomePage.jsx
NavBar.jsx
NotFound.jsx
Users.jsx
UserTodos.jsx
FormModal.jsx
OffCanvas.jsx
UserForm.jsx

Erase CSS, and Import Bootstrap:
We don't want any of our React Bootstrap styling to conflict with the CSS generated by Vite
Go to App.css and erase everything in there
Go to index.css and erase everything in there as well

We need to import React Bootstrap and BrowserRouter (again) into the whole project so they are applied everywhere
Go to main.jsx and place this code in there:
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom';
import App from './App.jsx'
import './index.css'
import 'bootstrap/dist/css/bootstrap.min.css'; // This imports/applies Bootstrap to the whole project

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>    
  </StrictMode>,
)
Verify Installation
Start the development server with npm run dev.
Open your browser and navigate to http://localhost:5173. You should see the React welcome page with the signs of Bootstrap being applied.


Styling the HomePage  Component
In the HomePage component, we will be adding a Bootstrap layout using Container, Row, and Col
We will also be adding a Carousel
Open HomePage.jsx and place this code inside.
// src/components/HomePage.jsx

// this importing method works but isn't the preferred way
// imports a lot of extra things that make the App less efficient
import { Container, Carousel, Row, Col } from 'react-bootstrap';

function HomePage() {

  return (
    <Container>
      <Row>
        <Col>
          <h3>Hi, welcome to the üè† page!</h3>
          <p>This app will let you see all of the very important fake users JSONPlaceholder gives us.</p>
        </Col>
      </Row>

      <Row>
        <Col>
          <Carousel>
            <Carousel.Item>
              <img
                className="d-block w-100"
                src="https://picsum.photos/1200/600?random=1"
                alt="First slide"
              />
              <Carousel.Caption style={{ textShadow: '2px 2px black' }}>
                <h3>First Slide</h3>
                <p>Description for the first slide.</p>
              </Carousel.Caption>
            </Carousel.Item>
            <Carousel.Item>
              <img
                className="d-block w-100"
                src="https://picsum.photos/1200/600?random=2"
                alt="Second slide"
              />
              <Carousel.Caption style={{ textShadow: '2px 2px black' }}>
                <h3>Second Slide</h3>
                <p>Description for the second slide.</p>
              </Carousel.Caption>
            </Carousel.Item>
            <Carousel.Item>
              <img
                className="d-block w-100"
                src="https://picsum.photos/1200/600?random=3"
                alt="Third slide"
              />
              <Carousel.Caption style={{ textShadow: '2px 2px black' }}>
                <h3>Third Slide</h3>
                <p>Description for the third slide.</p>
              </Carousel.Caption>
            </Carousel.Item>
          </Carousel>
        </Col>
      </Row>
    </Container>
  );
}

export default HomePage;
Explanation:
Imports
We are importing all of the Bootstrap functionality (Container, Row, etc.) using destructuring which is not the preferred way
When you import this way, it may bring in additional code that isn't explicitly used, potentially increasing bundle size, especially in older versions of the library.
Also, there is a chance that the entire react-bootstrap module is included in your bundle, even if you're only using a few components.
We will cover the recommended way of importing React Bootstrap in the next component.  For now, we will leave it as is so we can see both ways

Layout using Container Row and Col:
Container is used when you want to use the Bootstrap grid for a layout.  
You define any rows in the layout using Row and any columns within that row using Col
In the first Row we have one Col that contains the welcome message
In the second Row we have one Col that contains the Carousel

The Carousel Component
A Carousel in Bootstrap is a way to cycle through elements on a page like a slideshow
<Carousel> marks where it begins  </Carousel> marks where it ends
<Carousel.Item> defines the things that go in the slideshow
In our case we are using images pulled from an outside service
<Carousel.Caption> defines what goes on top of each image/slide
We are applying a textShadow to the caption because the default shadowing doesn't make the text stand out very well

The images
We are using className to apply specific Bootstrap styles to all the images in the slideshow
Each image will have a display of block (d-block) and their width will be 100% of the container it's in (w-100)
picsum.photos is the service we are using to pull in placeholder images
https://picsum.photos/1200/600?random=1 - gives us a random 1200px x 600px image  
We are using ?random=2 and ?random=3 on the other two images to ensure we don't get the same random image on all three slides

Create Home Route inside of App.jsx  
Like we did before, to be able to see the HomePage component, we need to create a route for it.  
So erase everything in App.jsx and add this:

import { Routes, Route } from 'react-router-dom';
import HomePage from './components/HomePage';

function App() {
  return (
    <>
      <Routes>
        <Route path="/" element={<HomePage />} />
      </Routes>
    </>
  );
}

export default App;
Now go to the home route (http://localhost:5173/) and we should be able to see the home page with the carousel.



Styling the NavBar component  
Now that we have the HomePage component showing up correctly and styled, let's style NavBar using Bootstraps's Navbar component.  Bootstrap has a built in navigation bar that is responsive that you can use right out of the box with little configuration.  
Open up NavBar.jsx and add this code:

// src/components/NavBar.jsx

import { NavLink } from 'react-router-dom';
import Navbar from 'react-bootstrap/Navbar';
import Nav from 'react-bootstrap/Nav';
import NavDropdown from 'react-bootstrap/NavDropdown';

function NavBar() {
  return (
    <Navbar bg="info" variant="dark" expand="lg" className="p-3 mb-4">
      <Navbar.Brand href="/">JSONPlaceholder Users</Navbar.Brand>
      <Navbar.Toggle aria-controls="basic-navbar-nav" />
      <Navbar.Collapse id="basic-navbar-nav">
        <Nav>
          <Nav.Link as={NavLink} to="/" activeclassname="active">
            Home
          </Nav.Link>
          <Nav.Link as={NavLink} to="/users" activeclassname="active">
            Users
          </Nav.Link>
          <NavDropdown title="Examples" id="basic-nav-dropdown">
            <NavDropdown.Item href="/user-form"> User Form</NavDropdown.Item>
            <NavDropdown.Item href="#">Something Else</NavDropdown.Item>
          </NavDropdown>
        </Nav>
      </Navbar.Collapse>
    </Navbar>
  );
}

export default NavBar;
Explanation:
Imports
Before, we mentioned the way the imports are done in HomePage wasn't the preferred way.
Here in NavBar, each individual Bootstrap component has it's own import statement which is the recommended way
We import what we want using this pattern:  import {nameOfComponent} from 'react-bootstrap/{nameOfComponent}'
This import method directly pulls in each individual component, reducing bundle size and improving performance by excluding other unused components. 
It‚Äôs the recommended approach for optimizing performance, as it ensures that only the components you need are included.

React Bootstrap's Navbar component:
<Navbar> defines when the navigation bar begins and ends.  Here are it's props:
bg="info" - controls the background color of the navigation bar.  
Uses the common colors of Bootstrap (success, danger, dark, etc.)
variant="dark" - controls the color of the text in the navigation bar.  Could also use "light"
expand="lg" - defines the screen width at which the Navbar switches from the collapsed mobile version to the fully expanded desktop version.
In this case we used "lg" which expands at large screens (992px and up).
className="p-3 mb-4" - gives the navigation bar an all around padding of 3 and a margin bottom of 4

<Navbar.Brand> defines the text in the left hand side of the Navbar
href="/" - this turns the brand into a link that will take the user to the home route.  This is common practice in web design

<Navbar.Toggle> controls whether a menu icon (three stacked horizontal lines) will show up on the right hand side when the page is in mobile view
aria-controls="basic-navbar-nav" - improves accessibility by identifying which element the toggle button controls

<Navbar.Collapse> - wraps around items like <Nav> components, allowing these items to collapse and expand as needed.
id="basic-navbar-nav" - this is how aria-controls knows which element it's controlling

<Nav> - used to organize and display a set of navigation links or items.

<Nav.Link> - provides a styled link that integrates well with the Bootstrap navigation bar
as={NavLink} - makes the <Nav.Link> function as a NavLink React Router component
The main difference between React Router's NavLink and Link is NavLink is able to use active styling
Active styling is special styling applied to a navigation link when it matches the current URL path.  
It is a visual cue to the user that tells them what page they are currently on
activeclassname="active" - this applies the active styling that we just discussed.  It tells the <Nav.Link> to apply special styling to when their routes are currently being viewed
to="/" and to="/users" - defines what routes are accessed when the links are clicked.  
In our case, the "Home" link will go to the / route and the "Users" link will to go the /users route.
We will create those later just like we did in the last lesson

<NavDropdown> - allows a link to have a sub menu of additional links appear when it's clicked
title="Examples" - defines what the clickable text of the link will be that shows the sub menu
id="basic-nav-dropdown - a basic id that identifies this <NavDropdown>

<NavDropdown.Item> - creates a link inside of the dropdown menu
href="/user-form" - defines what route is accessed when the <NavDropdown.Item> is clicked


Import/Add NavBar to App.jsx  
Like we did before, we want to be able to see the NavBar component throughout the whole app.  So inside of App.jsx import NavBar and place it outside of Routes (comments show where to place the new code)

import { Routes, Route } from 'react-router-dom';
import HomePage from './components/HomePage';
{/* added code starts here */}			
import NavBar from './components/NavBar';
{/* added code stops here */}			


function App() {
  return (
    <>
            {/* added code starts here */}			
            <NavBar />
            {/* added code stops here */}	 
            <Routes>
        <Route path="/" element={<HomePage />} />
      </Routes>
    </>
  );
}

export default App;
Now go to the home route (http://localhost:5173/) and we should be able to see the navigation bar on the home page.


Styling the NotFound component  
Now that we have HomePage and NavBar styled and showing up correctly, let's style NotFound  We want to make the countdown number more prominent so we will use a Badge to do so.

Open up NotFound.jsx and add this code:

import { useEffect, useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import Container from 'react-bootstrap/Container';
import Badge from 'react-bootstrap/Badge';

function NotFound() {
  const navigate = useNavigate();
  const [countdown, setCountdown] = useState(10);

  useEffect(() => {
    const interval = setInterval(() => {
      setCountdown((prevCountdown) => prevCountdown - 1);
    }, 1000);

    const timeout = setTimeout(() => {
      navigate('/'); 
    }, 10000);

    return () => {
      clearInterval(interval);
      clearTimeout(timeout);
    };
  }, [navigate]);

  return (
    <Container>
      <h2>404 Not Found</h2>
      <p>I am sorry, that location does not exist üò≠</p>
      <p><b>You will be redirected to the home page in...</b></p>
      <Badge bg="primary" className="mb-3 fs-2">{countdown}</Badge>
      <p>Or you can always <Link to="/">go home!</Link></p>
    </Container>
  );
}

export default NotFound;
Explanation:
Imports
All of these imports are ones we've already used except for Badge (we will discuss that later). And we are doing them in the recommended manner.

The Countdown and Redirect using navigate
All the code is the same from the last lesson until we get to the returned JSX

Returned Container in the JSX
We are using Container so the page will use the Bootstrap layout
The message is the same from the last lesson
The only difference is we are using putting the state variable countdown inside of a Badge component 
The Badge component is used to display a numerical value or a label on an interface element to usually help it stand out.  Ours has the following props:
bg="primary" - controls the background color of the Badge using Bootstrap colors
className="mb-3 fs-2" - applies a margin bottom of 3 and a font size of 2 to the Badge


Import/Add NotFound to App.jsx  
We want to see NotFound when we access an unhandled route so inside of App.jsx import NotFound and place it, AND KEEP IT, at the bottom of Routes (comments show where to place the new code)

import { Routes, Route } from 'react-router-dom';
import HomePage from './components/HomePage';
import NavBar from './components/NavBar';
{/* added code starts here */}			
import NotFound from './components/NotFound';
{/* added code stops here */}			


function App() {
  return (
    <>
            <NavBar />
            <Routes>
        <Route path="/" element={<HomePage />} />

                {/* added code starts here */}			
                <Route path="*" element={<NotFound />} />
                {/* added code stops here */}	 
      </Routes>
    </>
  );
}

export default App;
Now go to an undefined route (http://localhost:5173/qwerty) and we should be able to see the NotFound component with the countdown numbers in a Badge



Styling the Users component  
Now let's style Users  We are going to be using a couple of new React Bootstrap components on this one.  

We'll use Container, Row, and Col to setup a layout to hold all the users
We'll add a Spinner to the loading message when users are getting pulled from JSONPlaceholder.
We'll put each individual user in a Card which is a great way to show the user's information.

Open up Users.jsx and add this code:

// src/components/Users.js

import { useState, useEffect } from 'react';
import axios from 'axios';
import Container from 'react-bootstrap/Container';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Card from 'react-bootstrap/Card';
import Button from 'react-bootstrap/Button';
import Spinner from 'react-bootstrap/Spinner';

function Users() {
  const [users, setUsers] = useState([]);     // State to store users
  const [loading, setLoading] = useState(true); // Loading state
  const [error, setError] = useState(null);    // Error state

  // useEffect to fetch users when component mounts
  useEffect(() => {
    axios.get('https://jsonplaceholder.typicode.com/users')
      .then(response => {
        setUsers(response.data);
        setLoading(false);
      })
      .catch(error => {
        setError(`Failed to fetch users: ${error.message}`);
        setLoading(false);
      });

  }, []); // Empty dependency array ensures this runs only once

  if (loading) {
    return (
      <Container>
        <h3>
          <Spinner
            animation="border"
            variant="info"
            style={{ marginRight: '15px' }}
            role="status"
          />
          Loading Users...
        </h3>
      </Container>
    )
  }

  if (error) return <p>{error}</p>;

  return (
    <Container>
      <h3>User List</h3>
      <Row>
        {users.map(user => (
          <Col key={user.id} className="mt-4">
            <Card style={{ width: '18rem' }} >
              <Card.Body>
                <Card.Title>{user.name}</Card.Title>
                <Card.Subtitle className="mb-2 text-muted">üë§ {user.username}</Card.Subtitle>
                <Card.Text className="mt-3">üìû {user.phone}</Card.Text>
                <Card.Link href={`mailto:${user.email}`} className="mb-3 d-block text-decoration-none" >
                  ‚úâÔ∏è {user.email}
                </Card.Link>
                <Button href={`/user-todos/${user.id}`}>Todo List</Button>
              </Card.Body>
            </Card>
          </Col>
        ))}
      </Row>
    </Container>
  );
}

export default Users;
Explanation:
Imports
We are doing the same thing that we've already done a few times now.  The only difference is the new React Bootstrap components we will be using

State Variables and API Call
All of this code is the same as the last lesson until we get to if(loading) statement

if(loading) show Spinner
We changed up the message that appears, if loading is true, to use a Bootstrap layout Container component with a message and Spinner inside
Spinner - shows an animation that tells the user something is being loaded
animation="border"  - defines the type of animation the Spinner will perform.  "border" is a circle spinning around.  The other option is "grow" which has a circle growing larger and larger
variant="info" - defines what color the Spinner will be
style={{ marginRight: '15px' }}  - applies a margin right of 15px so there will be space between the message and the Spinner
role="status" - helps assistive technologies, such as screen readers, to better understand the purpose of the Spinner

TIP - if the App is loading the API too quickly, and you aren't able to see the loading message, you can "slow" your browser down by doing the following (this works in Chrome and Brave):
Open up the inspector/Developer Tools - you can do this by:
Right clicking on an empty area of the page and choose Inspect 
OR Pressing F12
OR Click on the menu in the upper right of the browser, choose more tools, choose developer tools
Once the Developer Tools are showing, click on the Network tab
Click where it says No Throttling
Choose 3G or Slow 4G 
This will force the browser to simulate that speed which will allow the loading message to display.  If it's still not showing, pick a slower speed.  3G usually does a good job.

Returned JSX - Container, Row, and Col
We are using a Container with one Row 
Each time the mapping of users runs it will create a new Col in that Row
Each user will be displayed horizontally in the Row.  
When there is no more space left it will go down to the next line making more Col in that Row

Returned JSX - Card
Inside of each Col is a Card
<Card> - a flexible and extensible container that is used to display various types of content.  We are going to put each user into their own <Card>
Each <Card> is given a 18rem width
<Card.Body> - defines where the the content of each card begins and stops
<Card.Title> - the larger and bolder text that shows up at the top of each card
<Card.Subtitle> - the sub text below the title
Each subtitle has a margin bottom of 2 and the text is muted (grayed out)
<Card.Text> - the body text of the card
The text of the card has a margin top of 3
<Card.Link> - creates a clickable link inside of the card
href={`mailto:${user.email}`} - when <Card.Link> is clicked, it uses mailto which opens the default email program on the computer and put the user's email into the "To:" field.  
The links also have a margin bottom of 3, block display, and the underline has been removed 

Returned JSX - Button
<Button> - creates a styled button on the page
href={`/user-todos/${user.id}`} - when the button is clicked it will go to the route that handles the todos for the user


Import/Add Users to App.jsx  
Now that we finished the Users component we want the link in the navigation bar to work
  
So let's open App.jsx import Users and place the route ABOVE the NotFound route (comments show where to place the new code)

import { Routes, Route } from 'react-router-dom';
import HomePage from './components/HomePage';
import NavBar from './components/NavBar';
import NotFound from './components/NotFound';
{/* added code starts here */}	
import Users from './components/Users';
{/* added code stops here */}			


function App() {
  return (
    <>
            <NavBar />
            <Routes>
        <Route path="/" element={<HomePage />} />
                {/* added code starts here */}			
                <Route path="/users" element={<Users />} />
                {/* added code stops here */}	 
                <Route path="*" element={<NotFound />} />				
      </Routes>
    </>
  );
}

export default App;
Now go to the home page (http://localhost:5173/) and click on the "Users" link in the navigation bar and we should see each user display in their own card with their information showing. 

However the Todo List buttons take us to our 404 page because we haven't created UserTodos  and it's route.  Let's do that now.



Styling the UserTodos component  
Now let's style UserTodos  We will be using Spinner again, along with Container.  The new React Bootstrap component we'll be using is ListGroup It will help us display the todo list in a stylized fashion


Open up UserTodos.jsx and add this code:

// src/components/UserTodos.js

import { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';
import Container from 'react-bootstrap/Container';
import ListGroup from 'react-bootstrap/ListGroup';
import Spinner from 'react-bootstrap/Spinner';

function UserTodos() {
  const { userId } = useParams();          
  const [todos, setTodos] = useState([]);  
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Fetch user and todos for the specific userId
  useEffect(() => {
    const fetchUserAndTodos = async () => {
      try {
        const userResponse = await axios.get(`https://jsonplaceholder.typicode.com/users/${userId}`);
        setUser(userResponse.data);

        const todosResponse = await axios.get(`https://jsonplaceholder.typicode.com/users/${userId}/todos`);
        setTodos(todosResponse.data);

      } catch (error) {
        setError(`Failed to fetch: ${error.message}`);

      } finally {
        setLoading(false);
      }
    };

    if (userId) {
      fetchUserAndTodos();
    }
  }, [userId]); // Refetch todos if userId changes

  if (loading) {
    return (
      <Container>
        <h3>
          <Spinner
            animation="border"
            variant="info"
            style={{ marginRight: '15px' }}
            role="status"
          />
          Loading User Todos...
        </h3>
      </Container>
    )
  }
  if (error) return <p>{error}</p>;

  return (
    <Container>
      <h4>Todos for: {user.name}</h4>
      <ListGroup className="mt-4" as="ol" numbered>
        {todos.map(todo => (
          <ListGroup.Item key={todo.id} variant={todo.completed ? "info" : "warning"}>
            {todo.completed ? "‚úÖ" : "‚ùå"} - {todo.title}
          </ListGroup.Item>
        ))}
      </ListGroup>
    </Container>
  );
}

export default UserTodos;
Explanation:
Imports
We are doing the same thing that we've already done a few times now.  The only difference is the ListGroup import

State Variables and API Call
All of this code is the same as the last lesson until we get to if(loading) statement

if(loading) show Spinner
This is the same as what we did in Users
The only difference is what our message says: "Loading User Todos..."

Returned JSX 
We have a Container just like in the other components.  It's to make it use Bootstrap's layout
Then we use a ListGroup which create a series of related content items usually in a vertical list
<ListGroup> - defines where the ListGroup starts and ends
We gave it a margin top of 4 to help separate it from the <h4> above
as="ol" - this tells the ListGroup to render as an ordered list because we want each todo to be numbered
numbered - tells the list to be rendered as a numbered list.
<ListGroup.Item> - defines an individual item inside of a ListGroup
key={todo.id} - helps React track each ListGroup.Item enabling efficient updates and rendering.
variant={todo.completed ? "info" : "warning"} - If the todo's property completed is true the variant or background color of the item will be info (light blue) if it's false it will be warning (yellow)
{todo.completed ? "‚úÖ" : "‚ùå"} - {todo.title} - If the todo's property completed is true the ‚úÖwill display, if it's false the ‚ùå will display


Import/Add UserTodos to App.jsx  
Now that we finished the UserTodos component we need make it so the "Todo List" buttons for each user in Users work
  
So let's open App.jsx import UserTodos and place the route ABOVE the NotFound route (comments show where to place the new code)

import { Routes, Route } from 'react-router-dom';
import HomePage from './components/HomePage';
import NavBar from './components/NavBar';
import NotFound from './components/NotFound';
import Users from './components/Users';
{/* added code starts here */}	
import UserTodos from './components/UserTodos';
{/* added code stops here */}			


function App() {
  return (
    <>
            <NavBar />
            <Routes>
        <Route path="/" element={<HomePage />} />
                <Route path="/users" element={<Users />} />
                {/* added code starts here */}			
                <Route path="/user-todos/:userId" element={<UserTodos />} />
                {/* added code stops here */}	 
                <Route path="*" element={<NotFound />} />				
      </Routes>
    </>
  );
}

export default App;
Now, go to the list of users and when we click on one of the user's "Todo List" buttons, it should show the loading message and the take us to the UserTodos component that is styled with ListGroup.

‚úÖ Congratulations! You've successfully completed Part 1 of the "Integrating Bootstrap with React" lesson! You learned how to use React Bootstrap to add Content, Row, Col, Spinner, Carousel, Navbar, Badge, Card, and ListGroup components to our React App!  In Part 2 of this lesson, we will style Forms using React Bootstrap in our JSONPlaceholder User App.